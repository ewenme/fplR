data <- tibble::as.tibble(extract$elements)
View(data)
data <- tibble::as.tibble(extract$events)
View(data)
goals_scored <- players()
goals_scored <- players() %>%
top_n(goals_scored, 10)
goals <- players() %>%
top_n(goals_scored, 10)
goals <- players() %>%
top_n(10, goals_scored)
goals <- players() %>%
top_n(10, goals_scored) %>%
arrange(goals_scored)
goals <- players() %>%
top_n(10, goals_scored) %>%
arrange(desc(goals_scored))
rm(goals_scored)
players() %>%
top_n(10, goals_scored) %>%
arrange(desc(goals_scored)) %>%
ggplot(aes(x=web_name, y=goals_scored)) +
geom_col()
players() %>%
top_n(10, goals_scored) %>%
ggplot(aes(x=reorder(web_name, -goals_scored), y=goals_scored)) +
geom_col()
players() %>%
top_n(10, goals_scored) %>%
ggplot(aes(x=reorder(web_name, -goals_scored), y=goals_scored)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
goals <- players() %>%
top_n(n = 10, wt = goals_scored)
ggplot(data = goals, aes(x=reorder(web_name, -goals_scored), y=goals_scored)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
topScorers <- goals[, 5]
topScorers <- goals[5 ,]
topScorers <- top_n(goals, n = 5, wt=goals_scored)
topScorersDetailed <- list()
topScorersDetailed <- list()
for (i in topScorers$id) {
data <- playerDetailed(player_id = i)
data$name <- topScorers$web_name[topScorers$id == i]
topScorersDetailed[[i]] <- data
}
topScorersDetailed <- bind_rows(topScorersDetailed)
View(topScorersDetailed)
ggplot(data = topScorersDetailed, aes(x=round, y=goals_scored, colour=name)) +
geom_line()
ggplot(data = topScorersDetailed, aes(x=round, y=cumsum(goals_scored), colour=name)) +
geom_line()
ggplot(data = topScorersDetailed, aes(x=round, colour=name)) +
geom_line(aes(y=cumsum(goals_scored)))
ggplot(data = topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=cumsum(goals_scored)))
topScorersDetailed %>%
group_by(name) %>%
summarise(goals_cs = cumsum(goals_scored)) %>%
ggplot(data = topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=goals_cs))
topScorersDetailed %>%
group_by(name) %>%
summarise(goals_cs = cumsum(goals_scored))
topScorersDetailed %>%
group_by(name, round) %>%
summarise(goals_cs = cumsum(goals_scored))
topScorersDetailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored))
topScorersDetailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored)) %>%
ggplot(data = topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=goals_cs))
topScorersDetailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored)) %>%
ggplot(aes(x=round, colour=name, group=name)) +
geom_line(aes(y=goals_cs))
View(topScorersDetailed)
ggplot(topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_index))
topScorers <- top_n(goals, n = 3, wt=goals_scored)
topScorersDetailed <- list()
for (i in topScorers$id) {
data <- playerDetailed(player_id = i)
data$name <- topScorers$web_name[topScorers$id == i]
topScorersDetailed[[i]] <- data
}
topScorersDetailed <- bind_rows(topScorersDetailed)
ggplot(topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_index))
topScorersDetailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored), ict_cs = cumsum(ict_index)) %>%
ggplot(aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_cs))
View(goals)
goals <- players() %>%
mutate(goals_per90 = goals_scored / minutes * 90)
goals <- players() %>%
mutate(goals_per90 = goals_scored / minutes * 90)
top_n(n = 10, wt = goals_per90)
goals <- players() %>%
mutate(goals_per90 = goals_scored / minutes * 90) %>%
top_n(n = 10, wt = goals_per90)
ggplot(data = goals, aes(x=reorder(web_name, -goals_per90), y=goals_per90)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
goals <- players() %>%
filter(minutes >= 300) %>%
mutate(goals_per90 = goals_scored / minutes * 90) %>%
top_n(n = 10, wt = goals_per90)
ggplot(data = goals, aes(x=reorder(web_name, -goals_per90), y=goals_per90)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
goals <- players() %>%
filter(minutes >= 300) %>%
mutate(goals_per90 = goals_scored / minutes * 90) %>%
top_n(n = 10, wt = goals_per90)
ggplot(data = goals, aes(x=reorder(web_name, -goals_per90), y=goals_per90)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
topPer90 <- top_n(goals, n = 3, wt=goals_per90)
topPer90Detailed <- list()
for (i in topPer90$id) {
data <- playerDetailed(player_id = i)
data$name <- topPer90$web_name[topPer90$id == i]
topPer90Detailed[[i]] <- data
}
topPer90 <- top_n(goals, n = 3, wt=goals_per90)
topPer90Detailed <- list()
for (i in topPer90$id) {
data <- playerDetailed(player_id = i)
data$name <- topPer90$web_name[topPer90$id == i]
topPer90Detailed[[i]] <- data
}
topPer90Detailed <- bind_rows(topPer90Detailed)
topPer90Detailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored), ict_cs = cumsum(ict_index)) %>%
ggplot(aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_cs))
View(topPer90Detailed)
topPer90Detailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored), ict_cs = cumsum(ict_index)) %>%
ggplot(aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_cs))
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90)
require(tidyr)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=per90, -name)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name)
topPer90Detailed %>%
group_by(web) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var, scales = "free")
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var)
topPer90 <- top_n(goals, n = 5, wt=goals_per90)
topPer90Detailed <- list()
for (i in topPer90$id) {
data <- playerDetailed(player_id = i)
data$name <- topPer90$web_name[topPer90$id == i]
topPer90Detailed[[i]] <- data
}
topPer90Detailed <- bind_rows(topPer90Detailed)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
coord_flip() +
facet_wrap( ~ var)
myHistory <- userHistory(137633)
View(myHistory)
ggplot(data = myHistory, aes(x=season_name, y=total_points, group=1)) +
geom_line()
ggplot(data = myHistory, aes(x=season_name, y=rank, group=1)) +
geom_line()
View(myHistory)
myPerformance <- userPerformance(137633)
View(myPerformance)
myPerformance <- userPerformance(137633)
ggplot(data = myPerformance, aes(x=event, y=points, group=1)) +
geom_line()
View(myPerformance)
ggplot(data = myPerformance, aes(x=event, y=overall_rank, group=1)) +
geom_line()
ggplot(data = myPerformance, aes(x=event, y=overall_rank, group=1)) +
geom_line() +
scale_y_reverse()
devtools::build_vignettes()
devtools::install_github("ewenme/fplR", build_vignettes = TRUE)
devtools::build_vignettes()
devtools::document()
devtools::install_github("ewenme/fplR", build_vignettes = TRUE)
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::use_package("tidyr")
devtools::use_package("ggplot2")
devtools::document()
browseVignettes(package = "fplR")
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
browseVignettes("fplR")
devtools::spell_check()
devtools::spell_check()
devtools::document()
source("https://install-github.me/MangoTheCat/goodpractice")
devtools::install_github("hadley/pkgdown")
goodpractice::gp()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
packrat::snapshot(prompt = FALSE)
playerDetailed <- function(player_id) {
#check the input is numeric, stop if not
if (!is.numeric(player_id))
stop("player_id isn't numeric format.")
#get player list
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#check the input is in range, stop if not
if (!player_id %in% 1:length(players$elements$id))
stop("player_id not found.")
#read in json player data, simplify vectors to make easy transfer to dataframe
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
player_id),
simplifyVector = TRUE)
#extract current seasons data ONLY, convert to tibble format
data <- tibble::as.tibble(data$history)
#replace codes with matching values
data$opponent_team <- with(players$teams, name[match(data$opponent_team, id)])
#convert values to fpl-familiar style
data$price <- data$value / 10
#convert var types
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#append player id
data$player_id <- data$element
data <- subset(data, select= -c(element, value))
return(data)
}
playerDetailed(12)
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
12),
simplifyVector = TRUE)
data <- tibble::as.tibble(data$history_past)
View(data)
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
12),
simplifyVector = TRUE)
players$element_types
players$events
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
12),
simplifyVector = TRUE)
data <- tibble::as.tibble(data$history)
data$history
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
12),
simplifyVector = TRUE)
playerDetailed <- function(player_id) {
#make the input numeric
player_id <- as.numeric(player_id)
#get player list
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#check the input is in range, stop if not
if (!player_id %in% 1:length(players$elements$id))
stop("player_id out of range.")
#read in json player data, simplify vectors to make easy transfer to dataframe
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
player_id),
simplifyVector = TRUE)
#extract current seasons data ONLY, convert to tibble format
data <- tibble::as.tibble(data$history)
if (length(data) < 1)
stop("Error: No player data for the current season, yet.")
#replace codes with matching values
data$opponent_team <- with(players$teams, name[match(data$opponent_team, id)])
#convert values to fpl-familiar style
data$price <- data$value / 10
#convert var types
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#append player id
data$player_id <- data$element
data <- subset(data, select= -c(element, value))
return(data)
}
playerDetailed(12)
playerDetailed <- function(player_id) {
#make the input numeric
player_id <- as.numeric(player_id)
#get player list
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#check the input is in range, stop if not
if (!player_id %in% 1:length(players$elements$id))
stop("player_id out of range.")
#read in json player data, simplify vectors to make easy transfer to dataframe
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
player_id),
simplifyVector = TRUE)
#extract current seasons data ONLY, convert to tibble format
data <- tibble::as.tibble(data$history)
if (length(data) < 1)
stop("No player data for the current season, yet.")
#replace codes with matching values
data$opponent_team <- with(players$teams, name[match(data$opponent_team, id)])
#convert values to fpl-familiar style
data$price <- data$value / 10
#convert var types
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#append player id
data$player_id <- data$element
data <- subset(data, select= -c(element, value))
return(data)
}
library(fplR)
test <- fixtures()
View(test)
test <- fixtures1617
View(test)
test <- players
test <- players()
View(test)
test <- teams()
View(test)
test <- userCompetition(123)
View(test)
test <- userHistory(123)
View(test)
test <- userPerformance(123)
test <- userPerformance(123)
userPerformance <- function(user_id) {
#check the input is numeric, stop if not
if (!is.numeric(user_id))
stop("user_id isn't numeric format.")
#get data
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id, "/history"),
simplifyVector = TRUE)
if (length(data$history) < 1)
stop("No user performance data for this season, yet")
return(data$history)
}
test <- userPerformance(123)
test <- userPicks(123, 1)
data <-  jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id, "/event/", 1, "/picks"),
simplifyVector = TRUE)
data <-  jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
123, "/event/", 1, "/picks"),
simplifyVector = TRUE)
install.packages("formatR")
formatR::tidy_dir("R")
devtools::document()
install.packages("opencpu")
library(fplR)
test <- fixtures()
View(test)
text <- fixtures1617
View(text)
test <- playerDetailed()
test <- playerDetailed(player_id = 12)
View(test)
test <- players()
test <- playerSeasons(player_id = 12)
View(test)
test <- teams()
View(test)
test <- userCompetition(user_id = 1234)
View(test)
test <- userHistory(user_id = 1234)
View(test)
test <- userInfo()
test <- userInfo(user_id = 1234)
test <- userPerformance(user_id = 1234)
View(test)
test <- userPicks(user_id = 1234, gameweek = 1)
View(test)
str(players())
str(playerDetailed(player_id = 12
str(playerDetailed(player_id = 12))
str(playerDetailed(player_id = 12))
str(playerSeasons(player_id = 2))
str(userPicks(user_id = 137633, gameweek = 1))
str(userPerformance(user_id = 137633))
str(userCompetition(user_id = 137633, type = "classic"))
str(userHistory(user_id = 137633))
str(teams())
head(teams())
# get my fpl season performance
myPerformance <- userPerformance(137633)
# plot my overall rank by gameweek
ggplot(data = myPerformance, aes(x=event, y=overall_rank, group=1)) +
geom_line() +
scale_y_reverse()
# load packages
library(fplR)
library(dplyr)
library(ggplot2)
# plot my overall rank by gameweek
ggplot(data = myPerformance, aes(x=event, y=overall_rank, group=1)) +
geom_line() +
scale_y_reverse()
devtools::build_vignettes()
devtools::build()
pkgdown::build_site()
playerSeasons(player_id = 23)
playerSeasons(player_id = 54)
# get player list
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static", simplifyVector = TRUE)
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/", player_id), simplifyVector = TRUE)
player_id=54
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/", player_id), simplifyVector = TRUE)
# extract current seasons data ONLY, convert to tibble format
data <- tibble::as.tibble(data$history_past)
# convert var types
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
# read in json player data, simplify vectors to make easy transfer to dataframe
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/", player_id), simplifyVector = TRUE)
# extract current seasons data ONLY, convert to tibble format
data <- tibble::as.tibble(data$history_past)
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/", player_id), simplifyVector = TRUE)
